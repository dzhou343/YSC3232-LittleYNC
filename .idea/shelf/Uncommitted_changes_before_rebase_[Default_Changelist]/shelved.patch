Index: app/src/main/java/com/example/littleync/MarketplaceActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.littleync;\n\nimport com.example.littleync.model.Marketplace;\nimport com.example.littleync.model.Resource;\n\nimport android.annotation.SuppressLint;\nimport android.os.Build;\nimport android.os.Bundle;\nimport android.view.View;\nimport android.widget.AdapterView;\nimport android.widget.ArrayAdapter;\nimport android.widget.Button;\nimport android.widget.EditText;\nimport android.widget.ImageButton;\nimport android.widget.Spinner;\nimport android.util.Log;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\nimport androidx.annotation.NonNull;\nimport androidx.annotation.Nullable;\nimport androidx.annotation.RequiresApi;\nimport androidx.appcompat.app.AppCompatActivity;\nimport androidx.constraintlayout.widget.ConstraintLayout;\nimport androidx.constraintlayout.widget.ConstraintSet;\n\nimport com.example.littleync.model.Trade;\nimport com.example.littleync.model.User;\nimport com.google.android.gms.tasks.OnCompleteListener;\nimport com.google.android.gms.tasks.OnSuccessListener;\nimport com.google.android.gms.tasks.Task;\nimport com.google.firebase.auth.FirebaseAuth;\nimport com.google.firebase.firestore.DocumentReference;\nimport com.google.firebase.firestore.DocumentSnapshot;\nimport com.google.firebase.firestore.FirebaseFirestore;\nimport com.google.firebase.firestore.Query;\nimport com.google.firebase.firestore.QueryDocumentSnapshot;\nimport com.google.firebase.firestore.QuerySnapshot;\n\nimport java.util.ArrayList;\nimport java.util.Locale;\nimport java.util.Objects;\n\nimport static com.example.littleync.MainActivity.loginStatus;\nimport static com.example.littleync.MainActivity.logoutTrigger;\n\npublic class MarketplaceActivity extends AppCompatActivity implements AdapterView.OnItemSelectedListener {\n    // To print to log instead of console\n    private final static String TAG = \"MarketplaceActivity\";\n\n    // DB attributes\n    private final FirebaseFirestore fs = FirebaseFirestore.getInstance();\n    private DocumentReference userDoc;\n    private User user;\n    private User initialUser;\n    private volatile boolean userLoaded = false;\n    private volatile boolean tradesLoaded = false;\n\n    // For trading\n    private Marketplace MARKETPLACE;\n\n//        T1\n    Resource sRecourceType;\n    private EditText receiveQty;\n    private EditText sellQty;\n    private Button postTradeBtn;\n    private Boolean displayed;\n    private Boolean posted;\n    private Spinner receiveType;\n    private Spinner sellType;\n    private String receiveTypeStr;\n    private String sellTypeStr;\n\n//    T2\n    private ConstraintLayout scrollParent;\n    //    for trade button t\n\n\n    @RequiresApi(api = Build.VERSION_CODES.O)\n    @Override\n    protected void onCreate(@Nullable Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.marketplace_page2);\n\n//        T1 initialization\n//        set up the spinner for the type of resource the user is asking for\n        receiveType = findViewById(R.id.receive_type);\n        ArrayAdapter<String> receiveAdapter = new ArrayAdapter<>(MarketplaceActivity.this,\n                R.layout.marketplace_spinner_default, getResources().getStringArray(R.array.marketplace1_spinner));\n        receiveAdapter.setDropDownViewResource(R.layout.marketplace_spinner_dropdown);\n        receiveType.setAdapter(receiveAdapter);\n        receiveType.setOnItemSelectedListener(this);\n\n//        set up the spinner for the type of resource the user is trading with\n        sellType = findViewById(R.id.sell_type);\n        ArrayAdapter<String> sellAdapter = new ArrayAdapter<>(MarketplaceActivity.this,\n                android.R.layout.simple_list_item_1, getResources().getStringArray(R.array.marketplace1_spinner));\n        sellAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\n        sellType.setAdapter(sellAdapter);\n        sellType.setOnItemSelectedListener(this);\n\n        receiveQty = findViewById(R.id.receive_qty);\n        sellQty = findViewById(R.id.sell_qty);\n\n        postTradeBtn = findViewById(R.id.post_trade_btn);\n        postTradeBtn.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                try {\n                    int receiveQtyInt = Integer.parseInt(receiveQty.getText().toString());\n                    int sellQtyInt = Integer.parseInt(sellQty.getText().toString());\n                    postTrade(sellTypeStr, receiveTypeStr, sellQtyInt, receiveQtyInt);\n                } catch (Exception e) {Log.e(\"What the hell\", e.getMessage());}\n\n//                TODO: delete button, dropdown appearance, automatic refresh\n            }});\n\n        posted = false;\n\n        scrollParent = findViewById(R.id.scroll_parent);\n        final Button displayExistingTradesBtn = findViewById(R.id.display_existing_trades_btn);\n        this.displayed = false;\n//       TODO: check boolean if_displayed\n\n        // Populate the scrollview on-demand\n        displayExistingTradesBtn.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                displayed = true;\n                scrollParent.removeAllViews();\n//                int i = 0;\n//                do {\n//                    View child = scrollParent.getChildAt(i);\n//                    if (child.getId()==R.id.t2_btn_row){\n//                        i += 1;\n//                        continue;\n//                    }\n//                    scrollParent.removeView(child);\n//                }\n//                while (scrollParent.getChildCount() > 1);\n\n//                for (int i = 0; i < scrollParent.getChildCount(); i++) {\n//                    View child = scrollParent.getChildAt(i);\n//                    if (child.getId()==R.id.first_row){\n//                        continue;\n//                    }\n//                    scrollParent.removeView(child);\n//                }\n\n\n                readUserAndPopulateTrades();\n            }\n        });\n\n        // Setup marketplace for trading\n        readUserAndPopulateTrades();\n    }\n\n    public synchronized void readUserAndPopulateTrades() {\n        String userID = FirebaseAuth.getInstance().getUid();\n        userLoaded = false;\n        tradesLoaded = false;\n        assert userID != null;\n        userDoc = fs.collection(\"users\").document(userID);\n        userDoc.get().addOnSuccessListener(new OnSuccessListener<DocumentSnapshot>() {\n                                    @Override\n                                    public void onSuccess(DocumentSnapshot documentSnapshot) {\n                                        Log.d(TAG, documentSnapshot.getId() + \" => \" + documentSnapshot.getData());\n                                        // Store the initial values of the user\n                                        initialUser = documentSnapshot.toObject(User.class);\n                                        // Store the user that this page will manipulate\n                                        user = documentSnapshot.toObject(User.class);\n                                        userLoaded = true;\n\n                                        Query queriedTrades = fs.collection(\"trades\")\n                                                .orderBy(\"timeOfListing\", Query.Direction.DESCENDING);\n                                        queriedTrades\n                                                .get()\n                                                .addOnCompleteListener(new OnCompleteListener<QuerySnapshot>() {\n                                                    @RequiresApi(api = Build.VERSION_CODES.O)\n                                                    @Override\n                                                    public void onComplete(@NonNull Task<QuerySnapshot> task) {\n                                                        if (task.isSuccessful()) {\n                                                            ArrayList<Trade> trades = new ArrayList<>();\n                                                            for (QueryDocumentSnapshot document : Objects.requireNonNull(task.getResult())) {\n                                                                Log.d(TAG, document.getId() + \" => \" + document.getData());\n                                                                Trade t = document.toObject(Trade.class);\n                                                                trades.add(t);\n                                                            }\n                                                            MARKETPLACE = new Marketplace(getApplicationContext(), trades);\n                                                            tradesLoaded = true;\n                                                            populateExistingDeals();\n                                                        }\n                                                    }\n                                                });\n                                    }\n                                }\n        );\n    }\n\n    @RequiresApi(api = Build.VERSION_CODES.O)\n    public void postTrade(String sellType, String receiveType, int sellQty, int receiveQty) {\n        if (userLoaded && tradesLoaded) {\n            MARKETPLACE.postTrade(fs, sellType, receiveType, sellQty, receiveQty);\n        } else {\n            Log.d(TAG, \"User/trades not yet loaded\");\n        }\n    }\n\n    public synchronized void acceptTrade(Trade toAccept) {\n        if (userLoaded && tradesLoaded) {\n            MARKETPLACE.acceptTrade(fs, toAccept.getDocumentID());\n        } else {\n            Log.d(TAG, \"User/trades not yet loaded\");\n        }\n    }\n\n    public void deleteTrade(){}\n\n    @RequiresApi(api = Build.VERSION_CODES.O)\n    protected synchronized void populateExistingDeals() {\n\n        int lastRowID = 0;\n\n        if (userLoaded && tradesLoaded) {\n            for (int i = 0; i < MARKETPLACE.getTrades().size(); i++) {\n                final Trade t = MARKETPLACE.getTrades().get(i);\n                final View new_row = getLayoutInflater().inflate(R.layout.t2_row, null, false);\n\n//        set content\n                TextView index = new_row.findViewById(R.id.index2);\n                TextView timestamp = new_row.findViewById(R.id.timestamp2);\n                TextView username = new_row.findViewById(R.id.username2);\n                TextView giving = new_row.findViewById(R.id.giving2);\n                TextView receiving = new_row.findViewById(R.id.receiving2);\n                final ImageButton t2Btn = new_row.findViewById(R.id.t2_btn2);\n                final Button t2Btn_text = new_row.findViewById(R.id.t2_btn_text2);\n\n//            change the appearance of the accept button if the current user posted this particular\n//            trade and make it unclickable as well\n                boolean sameUser = false;\n                if (t.getUserName().equals(user.getUserName())) {\n                    sameUser = true;\n                    t2Btn.setVisibility(View.INVISIBLE);\n                    t2Btn_text.setVisibility(View.VISIBLE);\n                    t2Btn_text.setText(\"Your trade\");\n                }\n\n                index.setText(String.valueOf(i + 1));\n                timestamp.setText(t.getTimeOfListing().split(\"T\")[0]);\n                username.setText(t.getUserName());\n                giving.setText(String.format(Locale.getDefault(), \"%s x %d\", t.getSellType(), t.getSellQty()));\n                receiving.setText(String.format(Locale.getDefault(), \"%s x %d\", t.getReceiveType(), t.getReceiveQty()));\n\n                final boolean finalSameUser = sameUser;\n                boolean deleteConfirm = false;\n                final boolean finalDeleteConfirm = deleteConfirm;\n                t2Btn_text.setOnClickListener(new View.OnClickListener() {\n                    @Override\n                    public void onClick(View v) {\n                        if (!finalSameUser) {\n                            acceptTrade(t);\n                            t2Btn_text.setText(\"Done!\");\n                        } else {\n                            if (!finalDeleteConfirm) {\n                                t2Btn_text.setText(\"Delete?\");\n                                t2Btn_text.setBackground(getResources().getDrawable(R.drawable.marketplace2_btn2));\n                            } else {\n                                deleteTrade();\n                                t2Btn_text.setText(\"Deleted!\");\n                            }\n\n                        }\n                    }\n                });\n\n                t2Btn.setOnClickListener(new View.OnClickListener() {\n                    @Override\n                    public void onClick(View v) {\n                        t2Btn.setVisibility(View.INVISIBLE);\n                        t2Btn_text.setVisibility(View.VISIBLE);\n                    }\n                });\n\n//        add to parent\n                scrollParent.addView(new_row);\n\n//        set id & then constraints\n                int id = View.generateViewId();\n//                Log.d(\"BRO\", String.valueOf(id));\n                new_row.setId(id);\n\n                ConstraintSet set = new ConstraintSet();\n                set.constrainWidth(id, ConstraintSet.WRAP_CONTENT);\n                set.constrainHeight(id, ConstraintSet.WRAP_CONTENT);\n\n                set.connect(id, ConstraintSet.LEFT, ConstraintSet.PARENT_ID, ConstraintSet.LEFT, 0);\n                set.connect(id, ConstraintSet.RIGHT, ConstraintSet.PARENT_ID, ConstraintSet.RIGHT, 0);\n\n                if (i == 0) {\n                    set.connect(id, ConstraintSet.TOP, ConstraintSet.PARENT_ID, ConstraintSet.TOP, 0);\n                } else {\n                    set.connect(id, ConstraintSet.TOP, lastRowID, ConstraintSet.BOTTOM, 0);\n                }\n\n                set.applyTo(scrollParent);\n\n                lastRowID = id;\n            }\n        } else {\n            Toast populatingFail = Toast.makeText(this, \"Failed to load trades, try again\", Toast.LENGTH_SHORT);\n            populatingFail.show();\n        }\n    }\n\n\n//    @RequiresApi(api = Build.VERSION_CODES.O)\n//    private void addRow2(){\n//        //        scroll test\n//        ArrayList<String> indexList = new ArrayList<>();\n//        ArrayList<String> timestampList = new ArrayList<>();\n//        ArrayList<String> usernameList = new ArrayList<>();\n//        ArrayList<String> givingList = new ArrayList<>();\n//        ArrayList<String> receivingList  = new ArrayList<>();\n//\n//        ConstraintLayout scrollParent = findViewById(R.id.scroll_box);\n//        int lastRowID = R.id.first_row;\n//\n//        for (int i  = 0; i < 20; i++) {\n////            creating test strings\n//            indexList.add(String.valueOf(i));\n//\n//            LocalDate newDate = LocalDate.of(2020, Month.APRIL, i+1);\n//            String newDateString = newDate.format(DateTimeFormatter.ofPattern(\"dd MMM yyyy\"));\n//            timestampList.add(newDateString);\n//\n//            char c = (char) (i + 64);\n//            char[] chars = new char[8];\n//            Arrays.fill(chars, c);\n//            String newString = new String(chars);\n//            usernameList.add(newString);\n//\n//            givingList.add(String.format(\"fish x %d\", i));\n//            receivingList.add(String.format(\"gold x %d\", i));\n//\n//            View new_row = getLayoutInflater().inflate(R.layout.t2_row, null, false);\n//\n////        set content\n//            TextView index = (TextView) new_row.findViewById(R.id.index2);\n//            TextView timestamp = (TextView) new_row.findViewById(R.id.timestamp2);\n//            TextView username = (TextView) new_row.findViewById(R.id.username2);\n//            TextView giving = (TextView) new_row.findViewById(R.id.giving2);\n//            TextView receiving = (TextView) new_row.findViewById(R.id.receiving2);\n//            final ImageButton t2Btn = (ImageButton) new_row.findViewById(R.id.t2_btn2);\n//\n//            index.setText(indexList.get(i));\n//            timestamp.setText(timestampList.get(i));\n//            username.setText(usernameList.get(i));\n//            giving.setText(givingList.get(i));\n//            receiving.setText(receivingList.get(i));\n//\n//            final Button t2Btn_text = (Button) new_row.findViewById(R.id.t2_btn_text2);\n//\n//            t2Btn_text.setOnClickListener(new View.OnClickListener() {\n//                @Override\n//                public void onClick(View v) {\n//                    acceptDeal();\n//                    t2Btn_text.setText(\"Done!\");\n//                }\n//            });\n//\n//            t2Btn.setOnClickListener(new View.OnClickListener() {\n//                @Override\n//                public void onClick(View v) {\n//                    t2Btn.setVisibility(View.INVISIBLE);\n//                    t2Btn_text.setVisibility(View.VISIBLE);\n//                }\n//            });\n//\n//\n////        add to parent\n//\n//            scrollParent.addView(new_row);\n//\n//\n////        set id & then constraints\n//            int id = View.generateViewId();\n//            Log.d(\"BRO\", String.valueOf(id));\n//            new_row.setId(id);\n//\n////        Remarks: 1. setting the height & weight to equal to first row doesn't work.\n////        2. setting the height & weight to the exact dim 312 and 40 also don't work\n////        3. setting the dim to 0 also doesn't work\n////        4. seem to need to set it super big\n////         5. try to have another set for row_set\n//\n////            ConstraintLayout firstRow = (ConstraintLayout) findViewById(R.id.first_row);\n////        int h = firstRow.getHeight();\n////        int w = firstRow.getWidth();\n////            TextView firstRowTimestamp = (TextView) findViewById(R.id.timestamp33);\n//\n////        ConstraintSet row_set = new ConstraintSet();\n////        row_set.constrainHeight(id, h);\n////        row_set.constrainWidth(id, w);\n////        row_set.applyTo((ConstraintLayout) new_row);\n////            Log.d(\"AAAAAAA\", String.valueOf(firstRowTimestamp.getWidth()));\n//\n//\n//            ConstraintSet set = new ConstraintSet();\n//            set.constrainWidth(id, ConstraintSet.WRAP_CONTENT);\n//            set.constrainHeight(id, ConstraintSet.WRAP_CONTENT);\n//\n//            set.connect(id, ConstraintSet.LEFT, ConstraintSet.PARENT_ID, ConstraintSet.LEFT, 0);\n//            set.connect(id, ConstraintSet.RIGHT, ConstraintSet.PARENT_ID, ConstraintSet.RIGHT, 0);\n//            set.connect(id, ConstraintSet.TOP, lastRowID, ConstraintSet.BOTTOM, 0);\n////            set.connect(id, ConstraintSet.BOTTOM, ConstraintSet.PARENT_ID, ConstraintSet.BOTTOM, 0);\n//            set.applyTo(scrollParent);\n////            Log.d(\"BBBBBBBB\", String.valueOf(timestamp.getWidth()));\n//\n//            lastRowID = id;\n//    }}\n\n    @Override\n    public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {\n        switch (parent.getId()){\n            case R.id.receive_type:\n                receiveTypeStr = parent.getItemAtPosition(position).toString();\n                break;\n            case R.id.sell_type:\n                sellTypeStr = parent.getItemAtPosition(position).toString();\n                break;\n        }\n    }\n\n\n    @Override\n    public void onNothingSelected(AdapterView<?> parent) {}\n\n}\n\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/littleync/MarketplaceActivity.java	(revision 5f951bc4a4dc7fa12e5f9a039f6a88acaa0c3cb2)
+++ app/src/main/java/com/example/littleync/MarketplaceActivity.java	(date 1604475368000)
@@ -261,7 +261,10 @@
                         if (!finalSameUser) {
                             acceptTrade(t);
                             t2Btn_text.setText("Done!");
-                        } else {
+                        }
+//                        the user can decide to delete his/her own trade; need to click twice, the second time
+//                        to confirm
+                        else {
                             if (!finalDeleteConfirm) {
                                 t2Btn_text.setText("Delete?");
                                 t2Btn_text.setBackground(getResources().getDrawable(R.drawable.marketplace2_btn2));
